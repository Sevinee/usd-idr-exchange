# -*- coding: utf-8 -*-
"""fetch data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TUgjy9ktTcxK6xma2UdgfC4eghH95zEi
"""

# ===============================
# Library
# ===============================
import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
import joblib
import requests
import warnings
warnings.filterwarnings("ignore")
from datetime import datetime
from math import sqrt
from numpy import concatenate
from matplotlib import pyplot
from pandas import read_excel
from pandas import DataFrame
from pandas import concat
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
from keras.models import Sequential,load_model
from keras.layers import Dense
from keras.layers import LSTM

# ===============================
# 1. Ambil Data Crude Oil, Emas, dan Kurs USD/IDR
# ===============================
start_date = '2010-01-01'
end_date = datetime.today().strftime('%Y-%m-%d')

crude_oil = yf.download('CL=F', start=start_date, end=end_date)['Close']
gold = yf.download('GC=F', start=start_date, end=end_date)['Close']
usd_idr = yf.download('IDR=X', start=start_date, end=end_date)['Close']

# Gabungkan menjadi satu DataFrame
df_market = pd.concat([usd_idr, crude_oil, gold], axis=1)
df_market.columns = ['usd_idr', 'crude_oil', 'gold']
df_market.index = pd.to_datetime(df_market.index)
df_market.dropna(inplace=True)  # Hilangkan baris yang memiliki NaN

# ===============================
# 2. Ambil Data Inflasi dari World Bank API
# ===============================
url = "https://api.worldbank.org/v2/country/ID/indicator/FP.CPI.TOTL.ZG?format=json&per_page=100"
response = requests.get(url).json()

# Validasi response
if isinstance(response, list) and len(response) > 1:
    inflation_data = [
        {"year": int(entry["date"]), "inflation": entry["value"]}
        for entry in response[1]
        if entry["value"] is not None
    ]
else:
    inflation_data = []

df_inflation = pd.DataFrame(inflation_data).sort_values("year")

# Ekspansi inflasi tahunan ke inflasi bulanan
monthly_inflation = pd.DataFrame()

for _, row in df_inflation.iterrows():
    year = str(int(row['year']))  # Cast to string
    months = pd.date_range(f"{year}-01-01", f"{year}-12-31", freq='M')
    monthly_df = pd.DataFrame({
        "date": months,
        "inflation": row['inflation'] / 12
    })
    monthly_inflation = pd.concat([monthly_inflation, monthly_df], ignore_index=True)

monthly_inflation.set_index("date", inplace=True)
monthly_inflation.index = pd.to_datetime(monthly_inflation.index)

# ===============================
# 3. Gabungkan Semua Data
# ===============================
# Gabungkan data inflasi bulanan ke data harian dengan join
df_final = df_market.copy()
df_final = df_final.merge(monthly_inflation, left_index=True, right_index=True, how='left')

# Isi nilai inflasi yang kosong dengan forward fill
df_final['inflation'] = df_final['inflation'].fillna(method='ffill')
df_final.dropna(inplace=True)

# Tampilkan hasil
df_final.head()

# Simpan dataframe mentah yang sudah dibersihkan
df_final.to_csv("preprocessed_actual_data.csv", index_label="date")